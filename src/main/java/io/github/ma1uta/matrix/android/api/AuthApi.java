/*
 * Copyright sablintolya@gmail.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.github.ma1uta.matrix.android.api;

import io.github.ma1uta.matrix.android.model.auth.LoginRequest;
import io.github.ma1uta.matrix.android.model.auth.LoginResponse;
import io.github.ma1uta.matrix.android.model.auth.SupportedLoginResponse;
import io.github.ma1uta.matrix.android.model.common.EmptyResponse;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.http.POST;

/**
 * A client can obtain access tokens using the /login API.
 * <p/>
 * Note that this endpoint does not currently use the user-interactive authentication API.
 */
public interface AuthApi {

    /**
     * Authentication types.
     * <p/>
     * <a href="https://matrix.org/docs/spec/client_server/unstable.html#id100>See more</a>.
     *
     * @author ma1uta
     */
    class AuthType {

        protected AuthType() {
            // singleton.
        }

        /**
         * The client submits a username and secret password, both sent in plain-text.
         */
        public static final String PASSWORD = "m.login.password";

        /**
         * The user completes a Google ReCaptcha 2.0 challenge.
         */
        public static final String RECAPTCHA = "m.login.recaptcha";

        /**
         * Authentication is supported via OAuth2 URLs. This login consists of multiple requests.
         */
        public static final String OAUTH2 = "m.login.oauth2";

        /**
         * Authentication is supported by authorising an email address with an identity server.
         */
        public static final String EMAIL_IDENTITY = "m.login.email.identity";

        /**
         * The client submits a login token.
         */
        public static final String TOKEN = "m.login.token";

        /**
         * Dummy authentication always succeeds and requires no extra parameters. Its purpose is to allow servers to not require any
         * form of User-Interactive Authentication to perform a request.
         */
        public static final String DUMMY = "m.login.dummy";

        /**
         * Bypassing registration flow for application service's users.
         */
        public static final String APPLICATION_SERVICE = "m.login.application_service";
    }

    /**
     * Gets the homeserver's supported login types to authenticate users. Clients should pick one of these and supply it as the
     * type when logging in.
     *
     * @return Status code 200: The login types the homeserver supports.
     *     Status code 429: This request was rate-limited.
     */
    @GET("/_matrix/client/r0/login")
    @Headers("Content-type: application/json")
    SupportedLoginResponse supportedLoginTypes();

    /**
     * Authenticates the user, and issues an access token they can use to authorize themself in subsequent requests.
     * <p/>
     * If the client does not supply a device_id, the server must auto-generate one.
     * <p/>
     * The returned access token must be associated with the device_id supplied by the client or generated by the server.
     * The server may invalidate any access token previously associated with that device.
     *
     * @param loginRequest    {@link LoginRequest}
     * @return <p>Status code 200: The user has been authenticated.</p>
     * <p>Status code 400: Part of the request was invalid. For example, the login type may not be recognised.</p>
     * <p>Status code 401: The login attempt failed. For example, the password may have been incorrect.</p>
     * <p>Status code 429: This request was rate-limited.</p>
     *
     * <a href="https://matrix.org/docs/spec/client_server/r0.3.0.html#relationship-between-access-tokens-and-devices>
     * See Relationship between access tokens and devices.</a>
     */
    @POST("/_matrix/client/r0/login")
    @Headers("Content-type: application/json")
    LoginResponse login(@Body LoginRequest loginRequest);

    /**
     * Invalidates an existing access token, so that it can no longer be used for authorization.
     * <p/>
     * <b>Requires auth</b>: Yes.
     * <p/>
     * The access token used in the request was successfully invalidated.
     *
     * @return Status code 200: The access token used in the request was succesfully invalidated.
     */
    @POST("/_matrix/client/r0/logout")
    @Headers("Content-type: application/json")
    EmptyResponse logout();

    /**
     * Invalidates all access tokens for a user, so that they can no longer be used for authorization. This includes the access token
     * that made this request.
     * <p/>
     * This endpoint does not require UI authorization because UI authorization is designed to protect against attacks where the
     * someone gets hold of a single access token then takes over the account. This endpoint invalidates all access tokens for the
     * user, including the token used in the request, and therefore the attacker is unable to take over the account in this way.
     * <p/>
     * <b>Requires auth</b>: Yes.
     *
     * @return Status code 200: The user's access tokens were succesfully invalidated.
     */
    @POST("/_matrix/client/r0/logout/all")
    @Headers("Content-type: application/json")
    EmptyResponse logoutAll();
}
